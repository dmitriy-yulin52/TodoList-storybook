{"version":3,"sources":["serviceWorker.ts","api/todoList-api.ts","Components/Task/EditableSpan/EditableSpan.tsx","app/app-reducer.ts","Components/Task/Task.tsx","state/todoList-reducer.tsx","state/task-reducer.tsx","utils/error-utils.ts","features/TodoListsList/TodoLIst/AddItemForm/AddItemForm.tsx","features/TodoListsList/TodoLIst/Todolist.tsx","features/TodoListsList/TodoListsList.tsx","Components/ErrorSnackBar/ErrorSnackBar.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","EditableSpan","React","memo","props","console","log","useState","editMode","setEditMode","value","title","setTitle","activateViewMode","onChange","TextField","autoFocus","onBlur","e","currentTarget","onKeyPress","event","key","size","style","color","onDoubleClick","instance","axios","create","baseURL","withCredentials","headers","APP_ACTION_TYPE","TodoListApi","get","post","id","delete","put","todolistId","taskTitle","taskId","model","Task","onClickHandler","useCallback","removeTask","task","todoListId","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","Fragment","className","Checkbox","status","IconButton","onClick","Delete","TODOLIST_ACTION_TYPE","initialState","error","setAppErrorAC","type","SET_ERROR","setAppStatusAC","SET_STATUS","ACTION_TYPE","fetchTodolistsTC","dispatch","then","res","todoLists","data","SET_TODOlIST","removeTodolistTC","CHANGE_TODOLIST_ENTITY_STATUS","REMOVE_TODOLIST","addTodolistTC","todolist","item","ADD_TODOLIST","changeTodolistTitleTC","CHANGE_TODOLIST_TITLE","changeTodoListTitleAC","fetchTasksTC","action","tasks","SET_TASKS","setTasksAC","items","addTaskTC","resultCode","ADD_TASK","AddTaskAC","messages","length","catch","err","message","removeTaskTC","REMOVE_TASK","RemoveTaskAC","updateTaskTC","domainModel","getState","find","t","apiModel","deadline","description","priority","startDate","UPDATE_TASK","updateTaskAC","handleServerAppError","handleNetworkError","warn","AddItemForm","addItem","disabled","setError","errorMessage","addItemHandler","titleTrim","trim","label","variant","AddBox","fontSize","display","Todolist","demo","useDispatch","useEffect","thunk","todoList","addTask","removeTodoList","changeTodoListTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodoList","filter","el","entityStatus","map","Button","margin","TodoListsList","useSelector","state","changeStatus","newTitle","CHANGE_TODOLIST_FILTER","addTodolist","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","elevation","Alert","ErrorSnackBar","app","handleClose","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","App","AppBar","position","Toolbar","justifyContent","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","rootReducer","combineReducers","copyState","forEach","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a7b69f56.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: `https://social-network.samuraijs.com/api/1.1/`,\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '4e3f5b5e-2baf-457b-9c14-722f665306af'\r\n    }\r\n})\r\nexport type TodoListTypeRes = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\nexport const TodoListApi = {\r\n    getTodoLists() {\r\n        return instance.get<TodoListTypeRes[]>('todo-lists')\r\n    },\r\n    createTodoList(title:string) {\r\n        return instance.post<ResponseType<{ item: TodoListTypeRes }>>('todo-lists', {title: title})\r\n    },\r\n    deleteTodoList(id:string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`)\r\n\r\n    },\r\n    updateTodoLists(title:string,id:string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title: title})\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, taskTitle: string) {\r\n        return instance.post<ResponseType<{item:TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitle})\r\n    },\r\n    deleteTask(todolistId:string, taskId:string){\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId:string, taskId:string, model:UpdateTaskModelType){\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`,model)\r\n    }\r\n}\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useCallback, useState} from 'react'\r\nimport {TextField} from '@material-ui/core'\r\n\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    console.log('editableSpan')\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [title, setTitle] = useState(props.value)\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.value)\r\n    }\r\n\r\n\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.key === 'Enter') {\r\n            activateViewMode()\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                value={title}\r\n                autoFocus\r\n                onBlur={activateViewMode}\r\n                onChange={changeTitle}\r\n                onKeyPress={onKeyPressHandler}\r\n                size={'small'}\r\n                style={{color: 'white'}}\r\n            />\r\n            : <span\r\n                onDoubleClick={activateEditMode}\r\n            >\r\n                    {props.value}\r\n            </span>\r\n    )\r\n})\r\n","import React from 'react'\r\n\r\n\r\nenum APP_ACTION_TYPE {\r\n    SET_STATUS = 'app-reducer/SET_STATUS',\r\n    SET_ERROR = 'app-reducer/SET_ERROR'\r\n}\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case APP_ACTION_TYPE.SET_STATUS:\r\n            return {...state, status: action.status}\r\n        case APP_ACTION_TYPE.SET_ERROR:\r\n            return {...state, error: action.error}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport const setAppErrorAC = (error: string | null) => {\r\n    return {\r\n        type: APP_ACTION_TYPE.SET_ERROR,\r\n        error\r\n    } as const\r\n}\r\nexport const setAppStatusAC = (status: RequestStatusType) => {\r\n    return {\r\n        type: APP_ACTION_TYPE.SET_STATUS,\r\n        status\r\n    } as const\r\n}\r\n\r\n\r\nexport type SetAppErrorAT = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusAT = ReturnType<typeof setAppStatusAC>\r\n\r\ntype ActionsType =\r\n    | SetAppErrorAT\r\n    | SetAppStatusAT\r\n\r\n\r\n\r\n","import React, {ChangeEvent, useCallback} from 'react'\nimport {EditableSpan} from \"./EditableSpan/EditableSpan\";\nimport {Checkbox, IconButton} from '@material-ui/core';\nimport {Delete} from '@material-ui/icons';\nimport {TaskStatuses, TaskType} from \"../../api/todoList-api\";\n\n\nexport type PropsType = {\n    task: TaskType\n    todoListId: string\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\n    removeTask: (taskId: string, todolistId: string) => void\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\n}\n\n\nexport const Task = React.memo((props: PropsType) => {\n\n\n        const onClickHandler = useCallback(() => {\n            props.removeTask(props.task.id,props.todoListId)\n        },[props.task.id,props.todoListId])\n        const onChangeHandler = useCallback((e:ChangeEvent<HTMLInputElement>)=> {\n            let newIsDoneValue = e.currentTarget.checked\n            props.changeTaskStatus(props.task.id,newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New,props.todoListId)\n        },[props.task.id,props.todoListId])\n        const onTitleChangeHandler = useCallback((newValue: string) => {\n            props.changeTaskTitle(props.task.id,newValue,props.todoListId)\n        },[props.task.id,props.todoListId])\n\n        return (\n            <React.Fragment>\n                <li className={'list'}>\n                    <Checkbox\n                        color={'primary'}\n                        checked={props.task.status === TaskStatuses.Completed}\n                        onChange={onChangeHandler}\n                        size={'small'}\n                    />\n                    <EditableSpan\n                        value={props.task.title}\n                        onChange={onTitleChangeHandler}\n                    />\n                    <IconButton\n                        onClick={onClickHandler}\n                        size={'small'}\n                        color={'primary'}\n                    >\n                        <Delete/>\n                    </IconButton>\n                </li>\n            </React.Fragment>\n        )\n    }\n)\n\n\n","import {TodoListApi, TodoListTypeRes} from \"../api/todoList-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType, setAppStatusAC, SetAppStatusAT} from \"../app/app-reducer\";\r\n\r\n\r\nexport type TitleType = \"All\" | \"Active\" | \"Completed\"\r\n\r\nexport enum TODOLIST_ACTION_TYPE {\r\n    REMOVE_TODOLIST = 'todoList-reducer/REMOVE-TODOLIST',\r\n    CHANGE_TODOLIST_TITLE = 'todoList-reducer/CHANGE-TODOLIST-TITLE',\r\n    CHANGE_TODOLIST_FILTER = 'todoList-reducer/CHANGE-TODOLIST-FILTER',\r\n    ADD_TODOLIST = 'todoList-reducer/ADD-TODOLIST',\r\n    SET_TODOlIST = 'todoList-reducer/SET-TODOlIST',\r\n    CHANGE_TODOLIST_ENTITY_STATUS = 'todoList-reducer/CHANGE_TODOLIST_ENTITY_STATUS',\r\n}\r\n\r\n// export type RemoveTodoListAT = {\r\n//     type: TODOLIST_ACTION_TYPE.REMOVE_TODOLIST\r\n//     todoListId: string\r\n// }\r\n// export type AddTodoListAT = {\r\n//     type: TODOLIST_ACTION_TYPE.ADD_TODOLIST\r\n//     title: string\r\n//     todoListId: string\r\n// }\r\n// export type ChangeTodoListTitleAT = {\r\n//     type: TODOLIST_ACTION_TYPE.CHANGE_TODOLIST_TITLE\r\n//     title: string\r\n//     todoListId: string\r\n// }\r\n// export type ChangeTodoListFilterAT = {\r\n//     type: TODOLIST_ACTION_TYPE.CHANGE_TODOLIST_FILTER\r\n//     title: TitleType\r\n//     todoListId: string\r\n// }\r\n\r\n\r\n\r\nexport const todoListReducer = (todoLists: Array<TodoListDomainType> = initialState, action: ACType) => {\r\n\r\n    switch (action.type) {\r\n        case TODOLIST_ACTION_TYPE.REMOVE_TODOLIST:\r\n            return todoLists.filter(tl => tl.id !== action.todoListId)\r\n        case TODOLIST_ACTION_TYPE.ADD_TODOLIST:\r\n            return [{...action.todolist,filter: 'All',entityStatus: 'idle'},...todoLists]\r\n        case TODOLIST_ACTION_TYPE.CHANGE_TODOLIST_TITLE:\r\n            return todoLists.map((el) => {\r\n                if (el.id === action.id) {\r\n                    return {...el, title: action.title}\r\n                }\r\n                return el\r\n            })\r\n        case TODOLIST_ACTION_TYPE.CHANGE_TODOLIST_FILTER:\r\n            return todoLists.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case TODOLIST_ACTION_TYPE.CHANGE_TODOLIST_ENTITY_STATUS:\r\n            return todoLists.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case TODOLIST_ACTION_TYPE.SET_TODOlIST: {\r\n            return action.todoLists.map(tl => ({\r\n                ...tl,\r\n                filter: 'All',\r\n                entityStatus: 'idle'\r\n            }))\r\n        }\r\n\r\n        default:\r\n            return todoLists\r\n    }\r\n}\r\n\r\n\r\n\r\n//action\r\nexport const removeTodoListAC = (todoListId: string) => {\r\n    return {\r\n        type: TODOLIST_ACTION_TYPE.REMOVE_TODOLIST,\r\n        todoListId: todoListId\r\n    } as const\r\n}\r\nexport const addTodoListAC = (todolist: TodoListTypeRes) => {\r\n    return {\r\n        type: TODOLIST_ACTION_TYPE.ADD_TODOLIST,\r\n        todolist\r\n    } as const\r\n}\r\nexport const changeTodoListTitleAC = (title: string, id: string) => {\r\n    return {\r\n        type: TODOLIST_ACTION_TYPE.CHANGE_TODOLIST_TITLE,\r\n        title,\r\n        id\r\n    }as const\r\n}\r\nexport const changeTodoListFilterAC = (filter: TitleType, id: string)=> {\r\n    return {\r\n        type: TODOLIST_ACTION_TYPE.CHANGE_TODOLIST_FILTER,\r\n        filter,\r\n        id\r\n    }as const\r\n}\r\nexport const changeTodoListEntityStatusAC = (status: RequestStatusType, id: string)=> {\r\n    return {\r\n        type: TODOLIST_ACTION_TYPE.CHANGE_TODOLIST_ENTITY_STATUS,\r\n        status,\r\n        id\r\n    }as const\r\n}\r\nexport const setTodolistsAC = (todoLists: Array<TodoListTypeRes>) => {\r\n    return {\r\n        type: TODOLIST_ACTION_TYPE.SET_TODOlIST,\r\n        todoLists\r\n    } as const\r\n}\r\n\r\n\r\n\r\n//thunk\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        TodoListApi.getTodoLists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n\r\n    return (dispatch: ThunkDispatch ) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(changeTodoListEntityStatusAC('loading',todolistId))\r\n        TodoListApi.deleteTodoList(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodoListAC(todolistId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        TodoListApi.createTodoList(title)\r\n            .then((res) => {\r\n                dispatch(addTodoListAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (title: string, id: string) => {\r\n    return (dispatch: Dispatch<ACType>) => {\r\n        TodoListApi.updateTodoLists(title, id)\r\n            .then((res) => {\r\n                dispatch(changeTodoListTitleAC(title,id))\r\n            })\r\n    }\r\n}\r\n\r\n//types\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: TitleType\r\n}\r\n\r\nexport type AddTodolistActionType = ReturnType<typeof addTodoListAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodoListAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\n\r\nexport type ACType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodoListTitleAC>\r\n    | ReturnType<typeof changeTodoListFilterAC>\r\n    | ReturnType<typeof changeTodoListEntityStatusAC>\r\n    | SetTodolistsActionType\r\n\r\n\r\nconst initialState: Array<TodoListDomainType> = []\r\nexport type TodoListDomainType = TodoListTypeRes & {\r\n    filter: TitleType,\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\ntype ThunkDispatch = Dispatch<ACType | SetAppStatusAT>","import {\r\n    AddTodolistActionType,\r\n    RemoveTodolistActionType,\r\n    SetTodolistsActionType,\r\n    TODOLIST_ACTION_TYPE\r\n} from \"./todoList-reducer\";\r\nimport {TaskPriorities, TaskStatuses, TaskType, TodoListApi, UpdateTaskModelType} from \"../api/todoList-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"../app/store\";\r\nimport {\r\n    setAppErrorAC,\r\n    SetAppErrorAT,\r\n    setAppStatusAC,\r\n    SetAppStatusAT,\r\n} from \"../app/app-reducer\";\r\nimport {handleNetworkError, handleServerAppError} from \"../utils/error-utils\";\r\n\r\nexport enum ACTION_TYPE {\r\n    REMOVE_TASK = 'task-reducer/REMOVE-TASK',\r\n    ADD_TASK = 'task-reducer/ADD-TASK',\r\n    UPDATE_TASK = 'task-reducer/CHANGE-TASK-STATUS',\r\n    SET_TASKS = 'task-reducer/SET-TASKS',\r\n\r\n}\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const taskReducer = (state: TasksStateType = initialState, action: ACType): TasksStateType => {\r\n\r\n    switch (action.type) {\r\n        case ACTION_TYPE.REMOVE_TASK: {\r\n            return {...state, [action.todoListId]: state[action.todoListId].filter(t => t.id !== action.taskId)}\r\n        }\r\n        case ACTION_TYPE.ADD_TASK: {\r\n            // let copyState = {...state}\r\n            // const newTask = {id: v1(), title: action.title, isDone: false}\r\n            // copyState[action.todoListId] = [newTask, ...state[action.todoListId]];\r\n            // return copyState\r\n            // const newTask:TaskType = {id: v1(), title: action.title, isDone: false}\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        }\r\n        case ACTION_TYPE.UPDATE_TASK: {\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        }\r\n\r\n        case TODOLIST_ACTION_TYPE.ADD_TODOLIST: {\r\n            return {...state, [action.todolist.id]: []}\r\n        }\r\n        case TODOLIST_ACTION_TYPE.REMOVE_TODOLIST: {\r\n            let copyState = {...state}\r\n            delete copyState[action.todoListId]\r\n            return copyState\r\n        }\r\n        case TODOLIST_ACTION_TYPE.SET_TODOlIST: {\r\n            const copyState = {...state}\r\n            action.todoLists.forEach((tl) => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState;\r\n        }\r\n        case ACTION_TYPE.SET_TASKS: {\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        }\r\n\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n\r\n\r\n//\r\n// export type RemoveTaskActionACType = {\r\n//     type: ACTION_TYPE.REMOVE_TASK\r\n//     taskId: string\r\n//     todoListId: string\r\n// }\r\n// export type AddTaskACType = {\r\n//     type: ACTION_TYPE.ADD_TASK\r\n//     task: TaskType\r\n// }\r\n// export type changeTaskStatusACType = {\r\n//     type: ACTION_TYPE.CHANGE_TASK_STATUS\r\n//     taskId: string\r\n//     isDone: boolean\r\n//     todoListId: string\r\n// }\r\n// export type addTaskTitleACType = {\r\n//     type: ACTION_TYPE.ADD_TITLE_TASK\r\n//     taskId: string\r\n//     title: string\r\n//     todoListId: string\r\n// }\r\n// export type SetTasksActionType = {\r\n//     type: ACTION_TYPE.SET_TASKS\r\n//     tasks: Array<TaskType>\r\n//     todolistId: string\r\n// }\r\n\r\n//types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nexport type ACType =\r\n    | ReturnType<typeof RemoveTaskAC>\r\n    | ReturnType<typeof AddTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n\r\ntype ThunkDispatch = Dispatch<ACType | SetAppStatusAT | SetAppErrorAT>\r\n\r\n//actions\r\nexport const RemoveTaskAC = (taskId: string, todoListId: string) => {\r\n    return {\r\n        type: ACTION_TYPE.REMOVE_TASK,\r\n        taskId,\r\n        todoListId\r\n    } as const\r\n}\r\n// export const AddTaskAC = (title: string, todoListId: string): AddTaskACType => {\r\n//     return {\r\n//         type: ACTION_TYPE.ADD_TASK,\r\n//         title,\r\n//         todoListId\r\n//     }\r\n// }\r\nexport const AddTaskAC = (task: TaskType) => {\r\n    return {\r\n        type: ACTION_TYPE.ADD_TASK,\r\n        task,\r\n    } as const\r\n}\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todoListId: string) => {\r\n    return {\r\n        type: ACTION_TYPE.UPDATE_TASK,\r\n        model,\r\n        todoListId,\r\n        taskId\r\n    } as const\r\n}\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => {\r\n    return {\r\n        type: ACTION_TYPE.SET_TASKS,\r\n        tasks,\r\n        todolistId\r\n    } as const\r\n}\r\n\r\n\r\n// export const AddTaskTitleAC = (taskId: string, title: string, todoListId: string) => {\r\n//     return {\r\n//         type: ACTION_TYPE.ADD_TITLE_TASK,\r\n//         title,\r\n//         todoListId,\r\n//         taskId\r\n//     }as const\r\n// }\r\n\r\n//thunk\r\nexport const fetchTasksTC = (todolistId: string) => {\r\n\r\n    return (dispatch: Dispatch<ACType | SetAppStatusAT>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        TodoListApi.getTasks(todolistId)\r\n            .then((res) => {\r\n                const tasks = res.data.items\r\n                const action = setTasksAC(tasks, todolistId)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ACType | SetAppErrorAT | SetAppStatusAT>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    TodoListApi.createTask(todolistId, title)\r\n        .then(res => {\r\n            if(res.data.resultCode === 0){\r\n                const task = res.data.data.item\r\n                const action = AddTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            }else{\r\n                if(res.data.messages.length){\r\n                    dispatch(setAppErrorAC(res.data.messages[0]))\r\n                }else{\r\n                    dispatch(setAppErrorAC('Network Error'))\r\n                }\r\n                dispatch(setAppStatusAC('failed'))\r\n            }\r\n        }).catch((err)=>{\r\n        dispatch(setAppErrorAC(err.message))\r\n        dispatch(setAppStatusAC('failed'))\r\n    })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ACType>) => {\r\n    TodoListApi.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = RemoveTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        TodoListApi.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if(res.data.resultCode === 0){\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                }else{\r\n                    handleServerAppError(res.data,dispatch)\r\n                }\r\n            }).catch((err)=>{\r\n                handleNetworkError(err, dispatch)\r\n        })\r\n    }\r\n","import {setAppErrorAC, SetAppErrorAT, setAppStatusAC, SetAppStatusAT} from \"../app/app-reducer\";\r\nimport {ResponseType} from \"../api/todoList-api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorAT | SetAppStatusAT>)=> {\r\n    if(data.messages.length){\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    }else{\r\n        dispatch(setAppErrorAC('Network Error'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\n\r\nexport const handleNetworkError = (err: {message: string},dispatch: Dispatch<SetAppErrorAT | SetAppStatusAT>)=> {\r\n    dispatch(setAppErrorAC(err.message ? err.message : 'Some error occurred'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react'\r\nimport {IconButton, TextField} from '@material-ui/core'\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\n\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?:boolean\r\n}\r\n\r\n\r\nexport const  AddItemForm = React.memo( ({addItem,disabled = false}: AddItemFormPropsType)=> {\r\n    console.log('AddItemForm')\r\n    const [title, setTitle] = useState('')\r\n    const [error, setError] = useState<null | string>(null)\r\n    const errorMessage = 'Title is required'\r\n\r\n\r\n    const addItemHandler = () => {\r\n        const titleTrim = title.trim()\r\n        if (titleTrim) {\r\n            addItem(titleTrim)\r\n        } else {\r\n            setError(errorMessage)\r\n        }\r\n        setTitle('')\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if(error !== null){\r\n            setError(null)\r\n        }\r\n        if (e.key === 'Enter') {\r\n            addItemHandler()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                value={title}\r\n                disabled={disabled}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onPressHandler}\r\n                label={'Title'}\r\n                variant={'outlined'}\r\n                size={'small'}\r\n                style={{color: 'white'}}\r\n            />\r\n            <IconButton\r\n                onClick={addItemHandler}\r\n                size={'small'}\r\n                color={'primary'}\r\n                disabled={disabled}\r\n            >\r\n                <AddBox fontSize={'large'}/>\r\n            </IconButton>\r\n            <div\r\n                style={error ? {color: 'red'} : {display: 'none'}}\r\n            >{errorMessage}</div>\r\n        </div>\r\n    )\r\n})\r\n\r\n","import React, {useCallback, useEffect, useState} from 'react'\nimport {EditableSpan} from \"../../../Components/Task/EditableSpan/EditableSpan\";\nimport {Button, IconButton} from '@material-ui/core';\nimport {Delete} from '@material-ui/icons';\nimport {Task} from \"../../../Components/Task/Task\";\nimport {\n    fetchTasksTC,\n} from \"../../../state/task-reducer\";\nimport {useDispatch} from \"react-redux\";\nimport {AddItemForm} from \"./AddItemForm/AddItemForm\";\nimport {TitleType, TodoListDomainType} from \"../../../state/todoList-reducer\";\nimport {TaskStatuses, TaskType} from \"../../../api/todoList-api\";\nimport {Preloader} from \"../../../Preloader/Preloader\";\n\n\ntype TodoListPropsType = {\n    todoList: TodoListDomainType\n    // title: string\n    // filter: TitleType\n    // todoListId: string\n    changeFilter: (value: TitleType, todoListId: string) => void\n    removeTodoList: (todoListId: string) => void\n    changeTodoListTitle: (title: string, todoListId: string) => void\n    addTask: (title: string, todoListId: string) => void\n    tasks: Array<TaskType>\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\n    removeTask: (taskId: string, todolistId: string) => void\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\n    demo?:boolean\n}\n\n\nexport const Todolist = React.memo(({demo = false,...props}: TodoListPropsType) => {\n\n\n\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        if(demo){\n            return\n        }\n        const thunk = fetchTasksTC(props.todoList.id)\n        dispatch(thunk)\n    }, [])\n\n    let addTask = useCallback((title: string) => {\n        props.addTask(title, props.todoList.id)\n    }, [props.addTask, props.todoList.id])\n\n\n    const removeTodoList = useCallback(() => {\n        props.removeTodoList(props.todoList.id)\n    }, [props.removeTodoList, props.todoList.id])\n    const changeTodoListTitle = useCallback((title: string) => {\n        props.changeTodoListTitle(title, props.todoList.id)\n    }, [props.changeTodoListTitle, props.todoList.id])\n\n\n    const onAllClickHandler = useCallback(() => {\n        props.changeFilter('All', props.todoList.id)\n    }, [props.changeFilter, props.todoList.id])\n    const onActiveClickHandler = useCallback(() => {\n        props.changeFilter('Active', props.todoList.id)\n    }, [props.changeFilter, props.todoList.id])\n    const onCompletedClickHandler = useCallback(() => {\n        props.changeFilter('Completed', props.todoList.id)\n    }, [props.changeFilter, props.todoList.id])\n\n    let tasksForTodoList = props.tasks;\n    if (props.todoList.filter === 'Active') {\n        tasksForTodoList = props.tasks.filter(el => el.status === TaskStatuses.New)\n    }\n    if (props.todoList.filter === 'Completed') {\n        tasksForTodoList = props.tasks.filter(el => el.status === TaskStatuses.Completed)\n    }\n\n\n    return (\n        <div className=\"App\">\n            <div className={'toDoList'}>\n                <h3 className={'listTitle'}>\n                    <EditableSpan\n                        value={props.todoList.title}\n                        onChange={changeTodoListTitle}\n                    />\n                    <IconButton\n                        onClick={removeTodoList}\n                        size={'small'}\n                        color={'primary'}\n                        disabled={props.todoList.entityStatus === 'loading'}\n                    >\n                        <Delete fontSize={'small'} />\n                    </IconButton>\n                </h3>\n                <div>\n                    <AddItemForm addItem={addTask} disabled={props.todoList.entityStatus === 'loading'}/>\n                </div>\n                <React.Fragment>\n                    <ul>\n                        {\n\n                            tasksForTodoList.map((t) => {\n                                return (\n                                    <>\n                                        <Task\n                                            task={t}\n                                            todoListId={props.todoList.id}\n                                            key={t.id}\n                                            removeTask={props.removeTask}\n                                            changeTaskStatus={props.changeTaskStatus}\n                                            changeTaskTitle={props.changeTaskTitle}\n                                        />\n                                    </>\n\n                                )\n                            })\n                        }\n                    </ul>\n                </React.Fragment>\n\n                <div className={'btnFilter'}>\n                    <Button\n                        size={'small'}\n                        variant={'contained'}\n                        onClick={onAllClickHandler}\n                        color={props.todoList.filter === 'All' ? 'secondary' : 'primary'}\n                    >\n                        All\n                    </Button>\n                    <Button\n                        style={{margin: '0 3px'}}\n                        size={'small'}\n                        variant={'contained'}\n                        onClick={onActiveClickHandler}\n                        color={props.todoList.filter === 'Active' ? 'secondary' : 'primary'}\n                    >\n                        Active\n                    </Button>\n                    <Button\n                        size={'small'}\n                        variant={'contained'}\n                        onClick={onCompletedClickHandler}\n                        color={props.todoList.filter === 'Completed' ? 'secondary' : 'primary'}\n                    >\n                        Completed\n                    </Button>\n                </div>\n            </div>\n        </div>\n    )\n})\n","import {Grid, Paper} from \"@material-ui/core\";\r\nimport React, {useCallback, useEffect} from \"react\";\r\nimport {Todolist} from \"./TodoLIst/Todolist\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {\r\n    addTodolistTC,\r\n    changeTodoListFilterAC,\r\n    changeTodolistTitleTC, fetchTodolistsTC,\r\n    removeTodolistTC, TitleType, TodoListDomainType,\r\n} from \"../../state/todoList-reducer\";\r\nimport {AddItemForm} from \"./TodoLIst/AddItemForm/AddItemForm\";\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from \"../../state/task-reducer\";\r\nimport {TaskStatuses} from \"../../api/todoList-api\";\r\n\r\n\r\n\r\ntype TodoListsListType = {\r\n    demo?:boolean\r\n}\r\n\r\n\r\nexport const TodoListsList:React.FC<TodoListsListType> = ({demo = false}) => {\r\n\r\n    const todoLists = useSelector<AppRootStateType, Array<TodoListDomainType>>(state => state.todoLists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if(demo){\r\n            return\r\n        }\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, []) //\r\n\r\n    const changeFilter = useCallback((value: TitleType, todoListId: string) => {\r\n        let thunk = changeTodoListFilterAC(value, todoListId)\r\n        dispatch(thunk)\r\n    }, [dispatch]) //\r\n    const removeTodoList = useCallback((id: string) => {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, []) //\r\n    const addTodolist = useCallback((title: string) => {\r\n        let thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, []) //\r\n    const changeTodoListTitle = useCallback((title: string, todoListId: string) => {\r\n        let thunk = changeTodolistTitleTC(title, todoListId)\r\n        dispatch(thunk)\r\n    }, []) //\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: '20px'}}>\r\n                <AddItemForm addItem={addTodolist}/>\r\n            </Grid>\r\n\r\n\r\n            <Grid container spacing={5}>\r\n                {\r\n                    todoLists.map(tl => {\r\n                        let allTodolistTasks = tasks[tl.id]\r\n                        return (\r\n                            <Grid item key={tl.id}>\r\n                                <Paper style={{padding: '10px'}} elevation={5}>\r\n                                    <Todolist\r\n                                        todoList={tl}\r\n                                        changeFilter={changeFilter}\r\n                                        removeTodoList={removeTodoList}\r\n                                        changeTodoListTitle={changeTodoListTitle}\r\n                                        addTask={addTask}\r\n                                        tasks={allTodolistTasks}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        removeTask={removeTask}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        demo={demo}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        )\r\n                    })}\r\n            </Grid>\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\n\r\n\r\nexport function ErrorSnackBar() {\r\n    // const [open, setOpen] = React.useState(true);\r\n\r\n    const error = useSelector<AppRootStateType, string | null>((state)=>state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n    const isOpen = error !== null\r\n    return (\r\n            <Snackbar open={isOpen} autoHideDuration={3000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"error\">\r\n                    {error}\r\n                </Alert>\r\n            </Snackbar>\r\n    );\r\n}","import React from 'react';\nimport './App.css';\nimport AppBar from '@material-ui/core/AppBar';\nimport {IconButton, Typography, Button, Toolbar, Container, LinearProgress} from '@material-ui/core';\nimport {Menu} from '@material-ui/icons';\n\nimport {TodoListsList} from \"../features/TodoListsList/TodoListsList\";\nimport {ErrorSnackBar} from \"../Components/ErrorSnackBar/ErrorSnackBar\";\nimport {useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"./store\";\nimport {RequestStatusType} from \"./app-reducer\";\n\n\ntype AppType = {\n    demo?:boolean\n}\n\nexport const App = ({demo = false}:AppType) => {\n\n    const status = useSelector<AppRootStateType, RequestStatusType>((state)=>state.app.status)\n\n    return (\n        <div className={'App'}>\n            <ErrorSnackBar/>\n            <AppBar position=\"static\">\n                <Toolbar style={{justifyContent: 'space-between'}}>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                        <Menu/>\n                    </IconButton>\n                    <Typography variant=\"h6\">\n                        TodoList\n                    </Typography>\n                    <Button\n                        color=\"inherit\"\n                        variant={'outlined'}\n                    >\n                        Login</Button>\n                </Toolbar>\n                { status === 'loading' && <LinearProgress />}\n            </AppBar>\n            <Container fixed>\n                <TodoListsList demo={demo}/>\n            </Container>\n        </div>\n    );\n}\n\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {taskReducer} from \"../state/task-reducer\";\r\nimport {todoListReducer} from \"../state/todoList-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {appReducer} from \"./app-reducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks:taskReducer,\r\n    todoLists:todoListReducer,\r\n    app: appReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {App} from \"./app/App\";\nimport {Provider} from \"react-redux\";\nimport { store } from './app/store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>\n    ,  document.getElementById('root')\n\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}